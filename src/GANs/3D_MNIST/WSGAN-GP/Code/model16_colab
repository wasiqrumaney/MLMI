{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"model16","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"vci5N0l0T3Qu","colab_type":"code","outputId":"e7d78de8-5c92-4554-dbea-4405d3cd8067","executionInfo":{"status":"ok","timestamp":1543316665381,"user_tz":-60,"elapsed":411257,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":140}},"cell_type":"code","source":["from google.colab import files\n","files.upload()\n"],"execution_count":1,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-0b7f665c-af4e-4452-b53e-fdd281f18b84\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-0b7f665c-af4e-4452-b53e-fdd281f18b84\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving full_dataset_vectors.h5 to full_dataset_vectors.h5\n","Saving lr_sh.py to lr_sh.py\n","Saving utils.py to utils.py\n"],"name":"stdout"}]},{"metadata":{"id":"EF6Pennv20gz","colab_type":"text"},"cell_type":"markdown","source":["## **Install pytorch**\n","\n","---\n","\n"]},{"metadata":{"id":"JLOg_JOIT8SM","colab_type":"code","outputId":"2a18639e-b5f4-48e9-89d3-f8cd6634c693","executionInfo":{"status":"ok","timestamp":1543316965823,"user_tz":-60,"elapsed":34170,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"cell_type":"code","source":["# http://pytorch.org/\n","from os.path import exists\n","from wheel.pep425tags import get_abbr_impl, get_impl_ver, get_abi_tag\n","platform = '{}{}-{}'.format(get_abbr_impl(), get_impl_ver(), get_abi_tag())\n","cuda_output = !ldconfig -p|grep cudart.so|sed -e 's/.*\\.\\([0-9]*\\)\\.\\([0-9]*\\)$/cu\\1\\2/'\n","accelerator = cuda_output[0] if exists('/dev/nvidia0') else 'cpu'\n","\n","!pip install -q http://download.pytorch.org/whl/{accelerator}/torch-0.4.1-{platform}-linux_x86_64.whl torchvision\n","import torch"],"execution_count":8,"outputs":[{"output_type":"stream","text":["tcmalloc: large alloc 1073750016 bytes == 0x58834000 @  0x7f7f621f22a4 0x591a07 0x5b5d56 0x502e9a 0x506859 0x502209 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x507641 0x502209 0x502f3d 0x506859 0x504c28 0x502540 0x502f3d 0x507641 0x504c28 0x502540 0x502f3d 0x507641\n"],"name":"stdout"}]},{"metadata":{"id":"D29cddfK24x0","colab_type":"text"},"cell_type":"markdown","source":["## **Instal other dependencies**\n","\n","---\n","\n"]},{"metadata":{"id":"Ttgop5jEXVw5","colab_type":"code","outputId":"65f00eea-803b-46fa-e5d3-89f96445ac8e","executionInfo":{"status":"ok","timestamp":1543316991828,"user_tz":-60,"elapsed":22149,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"base_uri":"https://localhost:8080/","height":833}},"cell_type":"code","source":["!pip install Pillow\n","!pip install PIL\n","!pip install image\n","!pip install h5py\n","! pip install visdom\n","!pip install h5py\n","print(torch.cuda.is_available())\n","torch.cuda.get_device_name(0)\n"],"execution_count":9,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: Pillow in /usr/local/lib/python3.6/dist-packages (5.3.0)\n","Collecting PIL\n","\u001b[31m  Could not find a version that satisfies the requirement PIL (from versions: )\u001b[0m\n","\u001b[31mNo matching distribution found for PIL\u001b[0m\n","Collecting image\n","  Downloading https://files.pythonhosted.org/packages/0c/ec/51969468a8b87f631cc0e60a6bf1e5f6eec8ef3fd2ee45dc760d5a93b82a/image-1.5.27-py2.py3-none-any.whl\n","Collecting django (from image)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d1/e5/2676be45ea49cfd09a663f289376b3888accd57ff06c953297bfdee1fb08/Django-2.1.3-py3-none-any.whl (7.3MB)\n","\u001b[K    100% |████████████████████████████████| 7.3MB 6.2MB/s \n","\u001b[?25hRequirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from image) (5.3.0)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from django->image) (2018.7)\n","Installing collected packages: django, image\n","Successfully installed django-2.1.3 image-1.5.27\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (2.8.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from h5py) (1.11.0)\n","Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.6/dist-packages (from h5py) (1.14.6)\n","Collecting visdom\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/c1/48/d90e1519768107811fd6e7760bea46fff9e9c9ffb490441684003ae634a9/visdom-0.1.8.5.tar.gz (248kB)\n","\u001b[K    100% |████████████████████████████████| 256kB 15.8MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.8 in /usr/local/lib/python3.6/dist-packages (from visdom) (1.14.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.6/dist-packages (from visdom) (1.1.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from visdom) (2.18.4)\n","Requirement already satisfied: tornado in /usr/local/lib/python3.6/dist-packages (from visdom) (4.5.3)\n","Requirement already satisfied: pyzmq in /usr/local/lib/python3.6/dist-packages (from visdom) (17.0.0)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from visdom) (1.11.0)\n","Collecting torchfile (from visdom)\n","  Downloading https://files.pythonhosted.org/packages/91/af/5b305f86f2d218091af657ddb53f984ecbd9518ca9fe8ef4103a007252c9/torchfile-0.1.0.tar.gz\n","Collecting websocket-client (from visdom)\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/26/2d/f749a5c82f6192d77ed061a38e02001afcba55fe8477336d26a950ab17ce/websocket_client-0.54.0-py2.py3-none-any.whl (200kB)\n","\u001b[K    100% |████████████████████████████████| 204kB 25.4MB/s \n","\u001b[?25hRequirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from visdom) (5.3.0)\n","Requirement already satisfied: idna<2.7,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->visdom) (2.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->visdom) (2018.10.15)\n","Requirement already satisfied: urllib3<1.23,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->visdom) (1.22)\n","Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->visdom) (3.0.4)\n","Building wheels for collected packages: visdom, torchfile\n","  Running setup.py bdist_wheel for visdom ... \u001b[?25l-\b \b\\\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/fb/ef/d8/ad95fbafb505c507b476c4e907af570d2dd41ae725cdc9b391\n","  Running setup.py bdist_wheel for torchfile ... \u001b[?25l-\b \bdone\n","\u001b[?25h  Stored in directory: /root/.cache/pip/wheels/b1/c3/d6/9a1cc8f3a99a0fc1124cae20153f36af59a6e683daca0a0814\n","Successfully built visdom torchfile\n","Installing collected packages: torchfile, websocket-client, visdom\n","Successfully installed torchfile-0.1.0 visdom-0.1.8.5 websocket-client-0.54.0\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (2.8.0)\n","Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.6/dist-packages (from h5py) (1.14.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from h5py) (1.11.0)\n","True\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["'Tesla K80'"]},"metadata":{"tags":[]},"execution_count":9}]},{"metadata":{"id":"qjQ3eMEN2UCS","colab_type":"text"},"cell_type":"markdown","source":["## **Main file**\n","\n","---\n","\n"]},{"metadata":{"id":"3nd5l531sy3F","colab_type":"code","outputId":"e6956f35-fe42-495e-b1e1-c407d3d52f20","executionInfo":{"status":"ok","timestamp":1543316812870,"user_tz":-60,"elapsed":1086,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["%%writefile model16/main.py\n","import argparse\n","from train import train\n","#from test import test\n","\n","def main(args):\n","    if args.test == False:\n","        train(args)\n","    else:\n","        test(args)\n","\n","\n","def str2bool(v):\n","    if v.lower() in ('yes', 'true', 't', 'y', '1'):\n","        return True\n","    elif v.lower() in ('no', 'false', 'f', 'n', '0'):\n","        return False\n","    else:\n","        raise argparse.ArgumentTypeError('Boolean value expected.')\n","\n","if __name__ == '__main__':\n","    parser = argparse.ArgumentParser()\n","    # Model Parmeters\n","    parser.add_argument('--n_epochs', type=float, default=1000,\n","                        help='max epochs')\n","    parser.add_argument('--batch_size', type=float, default=100, ###\n","                        help='each batch size')\n","    parser.add_argument('--g_lr', type=float, default=1e-4,\n","                        help='generator learning rate')\n","    parser.add_argument('--d_lr', type=float, default=1e-4, ###2e-4\n","                        help='discriminator learning rate')\n","    parser.add_argument('--beta', type=tuple, default=(0.9, 0.99),\n","                        help='beta for adam')\n","    parser.add_argument('--d_thresh', type=float, default=0.8,\n","                        help='for balance dsicriminator and generator')\n","    parser.add_argument('--z_size', type=float, default=100,\n","                        help='latent space size')\n","    parser.add_argument('--z_dis', type=str, default=\"norm\", choices=[\"norm\", \"uni\"],\n","                        help='uniform: uni, normal: norm')\n","    parser.add_argument('--bias', type=str2bool, default=False,\n","                        help='using cnn bias')\n","    parser.add_argument('--leak_value', type=float, default=0.2,\n","                        help='leakeay relu')\n","    parser.add_argument('--cube_len', type=float, default=16, #i changed this from 32 to 64\n","                        help='cube length')\n","    parser.add_argument('--obj', type=str, default=\"chair\",\n","                        help='tranining dataset object category')\n","    parser.add_argument('--soft_label', type=str2bool, default=True,\n","                        help='using soft_label')\n","    parser.add_argument('--lrsh', type=str2bool, default=True,\n","                        help='for learning rate shecduler')\n","\n","    # dir parameters\n","    parser.add_argument('--output_dir', type=str, default=\"../output\",\n","                        help='output path')\n","    parser.add_argument('--input_dir', type=str, default='../input',\n","                        help='input path')\n","    parser.add_argument('--pickle_dir', type=str, default='/pickle/',\n","                        help='input path')\n","    parser.add_argument('--log_dir', type=str, default='/log/',\n","                        help='for tensorboard log path save in output_dir + log_dir')\n","    parser.add_argument('--image_dir', type=str, default='/image/',\n","                        help='for output image path save in output_dir + image_dir')\n","    parser.add_argument('--data_dir', type=str, default='/chair/',\n","                        help='dataset load path')\n","\n","    # step parameter\n","    parser.add_argument('--pickle_step', type=int, default=10, ######\n","                        help='pickle save at pickle_step epoch')\n","    parser.add_argument('--log_step', type=int, default=1,\n","                        help='tensorboard log save at log_step epoch')\n","    parser.add_argument('--image_save_step', type=int, default=10, #######\n","                        help='output image save at image_save_step epoch')\n","\n","    # other parameters\n","    parser.add_argument('--model_name', type=str, default=\"V2\",\n","                        help='this model name for save pickle, logs, output image path and if model_name contain V2 modelV2 excute')\n","    parser.add_argument('--use_tensorboard', type=str2bool, default=False, ###\n","                        help='using tensorboard logging')\n","    parser.add_argument('--test_iter', type=int, default=10,\n","                        help='test_epoch number')\n","    parser.add_argument('--test', type=str2bool, default=False,\n","                        help='for test')\n","\n","\n","    args = parser.parse_args()\n","    main(args)\n","\n","\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["Writing model16/main.py\n"],"name":"stdout"}]},{"metadata":{"id":"IQDJQfx02cQ7","colab_type":"text"},"cell_type":"markdown","source":["## **model File**\n","\n","---\n","\n"]},{"metadata":{"id":"pJpvVU4Ds5yy","colab_type":"code","outputId":"e625ba0f-5f67-494d-bd2b-7316bd8af3bf","executionInfo":{"status":"ok","timestamp":1543320541741,"user_tz":-60,"elapsed":1005,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["%%writefile model16/model.py\n","\n","import torch\n","\n","\n","class _G(torch.nn.Module):\n","    def __init__(self, args):\n","        super(_G, self).__init__()\n","        self.args = args\n","        self.cube_len = args.cube_len\n","\n","        padd = (0, 0, 0)\n","        if self.cube_len == 32:\n","            padd = (1,1,1)\n","\n","        self.layer1 = torch.nn.Sequential(\n","            torch.nn.ConvTranspose3d(self.args.z_size, self.cube_len*16, kernel_size=4, stride=2, bias=args.bias, padding=padd),\n","            torch.nn.BatchNorm3d(self.cube_len*16),\n","            torch.nn.ReLU()\n","        )\n","        self.layer2 = torch.nn.Sequential(\n","            torch.nn.ConvTranspose3d(self.cube_len*16, self.cube_len*8, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","            torch.nn.BatchNorm3d(self.cube_len*8),\n","            torch.nn.ReLU()\n","        )\n","        self.layer3 = torch.nn.Sequential(\n","            torch.nn.ConvTranspose3d(self.cube_len*8, 1, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","            torch.nn.BatchNorm3d(1),\n","            #torch.nn.Linear(-1,1),\n","            torch.nn.ReLU(),\n","            ##torch.nn.Tanh() ###\n","            torch.nn.Sigmoid()\n","        )\n","#         self.linear= torch.nn.Sequential(\n","#             torch.nn.Linear(self.cube_len*self.cube_len*self.cube_len,1),\n","#         )\n","#         self.final= torch.nn.Sequential(\n","#             torch.nn.ReLU(),\n","#             ##torch.nn.Tanh() ###\n","#             torch.nn.Sigmoid()\n","#         )\n","#         self.layer4 = torch.nn.Sequential(\n","#             torch.nn.ConvTranspose3d(self.cube_len*2, self.cube_len, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","#             torch.nn.BatchNorm3d(self.cube_len),\n","#             torch.nn.ReLU()\n","#         )\n","#         self.layer5 = torch.nn.Sequential(\n","#             torch.nn.ConvTranspose3d(self.cube_len, 1, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","#             torch.nn.Sigmoid()\n","#         )\n","\n","    def forward(self, x):\n","        out = x.view(-1, self.args.z_size, 1, 1, 1)\n","        #print(out.size())  # torch.Size([100, 200, 1, 1, 1])\n","        out = self.layer1(out)\n","        #print(out.size())  # torch.Size([100, 256, 4, 4, 4])\n","        out = self.layer2(out)\n","        #print(out.size())  # torch.Size([100, 128, 8, 8, 8])\n","        out = self.layer3(out)\n","        #print(out.size())  # torch.Size([100, 1, 16, 16, 16])\n","#         out = out.view(-1,self.cube_len*self.cube_len*self.cube_len)\n","#         print(out.size())\n","#         out = self.linear(out)\n","#         print(out.size())\n","#         out = self.final(out)\n","#         print(out.size())\n","        #out = self.layer4(out)\n","        #print(out.size())  # torch.Size([100, 64, 32, 32, 32])\n","        #out = self.layer5(out)\n","        #print(out.size())  # torch.Size([100, 1, 64, 64, 64])\n","\n","        return out\n","\n","\n","class _D(torch.nn.Module):\n","    def __init__(self, args):\n","        super(_D, self).__init__()\n","        self.args = args\n","        self.cube_len = args.cube_len\n","\n","        padd = (0,0,0)\n","        if self.cube_len == 32:\n","            padd = (1,1,1)\n","\n","#         self.layer1 = torch.nn.Sequential(\n","#             torch.nn.Conv3d(1, self.cube_len, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","#             torch.nn.BatchNorm3d(self.cube_len),\n","#             torch.nn.LeakyReLU(self.args.leak_value)\n","#         )\n","#         self.layer2 = torch.nn.Sequential(\n","#             torch.nn.Conv3d(self.cube_len, self.cube_len*2, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","#             torch.nn.BatchNorm3d(self.cube_len*2),\n","#             torch.nn.LeakyReLU(self.args.leak_value)\n","#         )\n","        self.layer3 = torch.nn.Sequential(\n","            torch.nn.Conv3d(1, self.cube_len*4, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","            torch.nn.BatchNorm3d(self.cube_len*4),\n","            torch.nn.LeakyReLU(self.args.leak_value)\n","        )\n","        self.layer4 = torch.nn.Sequential(\n","            torch.nn.Conv3d(self.cube_len*4, self.cube_len*8, kernel_size=4, stride=2, bias=args.bias, padding=(1, 1, 1)),\n","            torch.nn.BatchNorm3d(self.cube_len*8),\n","            torch.nn.LeakyReLU(self.args.leak_value)\n","        )\n","        self.layer5 = torch.nn.Sequential(\n","            torch.nn.Conv3d(self.cube_len*8, 1, kernel_size=4, stride=2, bias=args.bias, padding=padd),\n","             #nn.Linear(output_size, 1),\n","            torch.nn.Sigmoid()\n","        )\n","        #might add linear layer here\n","\n","    def forward(self, x):\n","        out = x.view(-1, 1, self.args.cube_len, self.args.cube_len, self.args.cube_len)\n","        #print(out.size()) # torch.Size([100, 1, 16, 16, 16])\n","        #out = self.layer1(out)\n","        #print(out.size())  # torch.Size([100, 64, 32, 32, 32])\n","        #out = self.layer2(out)\n","        #print(out.size())  # torch.Size([100, 128, 16, 16, 16])\n","        out = self.layer3(out)\n","        #print(out.size())  # torch.Size([100, 64, 8, 8, 8])\n","        out = self.layer4(out)\n","        #print(out.size())  # torch.Size([100, 128, 4, 4, 4])\n","        out = self.layer5(out)\n","        #print(out.size())  # torch.Size([100, 1, 1, 1, 1])\n","\n","        return out"],"execution_count":31,"outputs":[{"output_type":"stream","text":["Overwriting model16/model.py\n"],"name":"stdout"}]},{"metadata":{"id":"nz5ef6fz2Gk0","colab_type":"text"},"cell_type":"markdown","source":["### **Train file **\n","\n","---\n","\n"]},{"metadata":{"id":"rrZ0Ag5lsA1T","colab_type":"code","outputId":"bfea966b-8ca1-41ca-b7d6-0667e9c1cb1b","executionInfo":{"status":"ok","timestamp":1543324797057,"user_tz":-60,"elapsed":743,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["%%writefile model16/train.py\n","import torch\n","from torch import optim\n","from torch import  nn\n","import torch.nn.functional as F\n","import torch.autograd as autograd\n","from torch.autograd import Variable\n","import matplotlib\n","matplotlib.use('Agg')\n","import matplotlib.pyplot as plt\n","import h5py as h5\n","from collections import OrderedDict\n","from utils import make_hyparam_string, save_new_pickle, read_pickle, SavePloat_Voxels, generateZ,plotVoxelVisdom\n","import os\n","import time\n","import numpy as np\n","from utils import ShapeNetDataset, var_or_cuda\n","from model import _G, _D\n","from lr_sh import  MultiStepLR\n","from visdom import Visdom \n","#from plot import plot, flush, tick\n","cuda = True if torch.cuda.is_available() else False\n","Tensor = torch.cuda.FloatTensor if cuda else torch.FloatTensor\n","    \n","def compute_gradient_penalty(D, real_samples, fake_samples):\n","    \"\"\"Calculates the gradient penalty loss for WGAN GP\"\"\"\n","    batch_size = real_samples.size()[0]\n","    # Random weight term for interpolation between real and fake samples\n","    alpha = torch.rand(batch_size,1,1, 1, 1)\n","    if cuda:\n","        alpha=alpha.cuda()\n","\n","    # Get random interpolation between real and fake samples\n","    interpolates = (alpha * real_samples.data + ((1 - alpha) * fake_samples.data)) #.requires_grad_(True)\n","    interpolates = autograd.Variable(interpolates, requires_grad=True)\n","    if cuda:\n","        interpolates=interpolates.cuda()\n","    \n","    #propabiliy of interpolated examples\n","    d_interpolates = D(interpolates)\n","   \n","    fake = torch.ones(d_interpolates.size()).cuda() if cuda else torch.ones(\n","                                  d_interpolates.size())\n","    #print(fake.size(), fake) \n","    # Get gradient w.r.t. interpolates\n","    gradients = autograd.grad(\n","        outputs=d_interpolates,\n","        inputs=interpolates,\n","        grad_outputs=fake,\n","        create_graph=True,\n","        retain_graph=True,\n","        only_inputs=True,\n","    )[0]\n","    gradients = gradients.view(gradients.size(0), -1)\n","    #gradient_penalty = ((gradients.norm(2, dim=1) - 1) ** 2).mean()\n","    gradients_norm = torch.sqrt(torch.sum(gradients ** 2, dim=1) + 1e-12)\n","    gradient_penalty = ((gradients_norm - 1) ** 2).mean()\n","    return gradient_penalty\n","\n","\n","\n","\n","def train(args):\n","    #for creating the visdom object\n","#     DEFAULT_PORT = 8097\n","#     DEFAULT_HOSTNAME = \"http://localhost\"\n","#     viz = Visdom(DEFAULT_HOSTNAME,DEFAULT_PORT, ipv6=False)\n","    \n","    #WSGAN related params\n","    lambda_gp = 10\n","    n_critic = 5\n","\n","    \n","    hyparam_list = [(\"model\", args.model_name),\n","                    (\"cube\", args.cube_len),\n","                    (\"bs\", args.batch_size),\n","                    (\"g_lr\", args.g_lr),\n","                    (\"d_lr\", args.d_lr),\n","                    (\"z\", args.z_dis),\n","                    (\"bias\", args.bias),\n","                    (\"sl\", args.soft_label),]\n","\n","    hyparam_dict = OrderedDict(((arg, value) for arg, value in hyparam_list))\n","    log_param = make_hyparam_string(hyparam_dict)\n","    print(log_param)\n","    \n","    # for using tensorboard\n","    if args.use_tensorboard:\n","        import tensorflow as tf\n","\n","        summary_writer = tf.summary.FileWriter(args.output_dir + args.log_dir + log_param)\n","\n","        def inject_summary(summary_writer, tag, value, step):\n","                summary = tf.Summary(value=[tf.Summary.Value(tag=tag, simple_value=value)])\n","                summary_writer.add_summary(summary, global_step=step)\n","\n","        inject_summary = inject_summary\n","\n","\n","    # datset define\n","    dsets_path = args.input_dir + args.data_dir + \"train/\"\n","    print(dsets_path)\n","    \n","    #x_train = np.load(\"voxels_3DMNIST_16.npy\")\n","    with h5.File('full_dataset_vectors.h5', 'r') as f:\n","      X_train = f[\"X_train\"][:]\n","    \n","    dataset = X_train[:5000,:].reshape(-1,args.cube_len*args.cube_len*args.cube_len)\n","    print(dataset.shape)\n","    dset_loaders = torch.utils.data.DataLoader(dataset, batch_size=args.batch_size, shuffle=True, num_workers=1)\n","\n","    # model define\n","    D = _D(args)\n","    G = _G(args)\n","\n","    D_solver = optim.Adam(D.parameters(), lr=args.d_lr, betas=args.beta)\n","    G_solver = optim.Adam(G.parameters(), lr=args.g_lr, betas=args.beta)\n","\n","    if args.lrsh:\n","        D_scheduler = MultiStepLR(D_solver, milestones=[500, 1000])\n","\n","    if torch.cuda.is_available():\n","        print(\"using cuda\")\n","        D.cuda()\n","        G.cuda()\n","\n","    #criterion = nn.BCELoss()\n","\n","    pickle_path = \".\" + args.pickle_dir + log_param\n","    read_pickle(pickle_path, G, G_solver, D, D_solver)\n","    G_losses=[]\n","    D_losses=[]\n","    count_real_itr=0\n","    for epoch in range(args.n_epochs):\n","        epoch_start_time = time.time() \n","        print(\"epoch %d started\" %(epoch))\n","        for i, X in enumerate(dset_loaders):\n","\n","            X = var_or_cuda(X)\n","            X = X.type(torch.cuda.FloatTensor)\n","            if X.size()[0] != int(args.batch_size):\n","                continue\n","\n","            Z = generateZ(args)\n","            # ============= Train the discriminator =============#\n","            d_real = D(X)\n","            #d_real_loss = criterion(d_real, real_labels)\n","\n","\n","            fake = G(Z)\n","            d_fake = D(fake)\n","\n","            # Gradient penalty\n","            real = Variable(X.type(Tensor).view(-1,1,args.cube_len,args.cube_len,args.cube_len))\n","            gradient_penalty = compute_gradient_penalty(D, real.data, fake.data)\n","            # Adversarial loss\n","            d_loss = -torch.mean(d_real) + torch.mean(d_fake) + lambda_gp * gradient_penalty\n","\n","            #d_loss = d_real_loss + d_fake_loss\n","\n","\n","            d_real_acu = torch.ge(d_real.squeeze(), 0.5).float()\n","            d_fake_acu = torch.le(d_fake.squeeze(), 0.5).float()\n","            d_total_acu = torch.mean(torch.cat((d_real_acu, d_fake_acu),0))\n","            Wasserstein_D = torch.mean(d_real - d_fake)\n","\n","            if 1:\n","            #if d_total_acu <= args.d_thresh:\n","                D.zero_grad()\n","                d_loss.backward()\n","                D_solver.step()\n","                G_solver.zero_grad()\n","            # =============== Train the generator ===============#\n","                    # Train the generator every n_critic steps\n","            if i % n_critic == 0:\n","                Z = generateZ(args)\n","\n","                fake = G(Z)\n","                d_fake = D(fake)\n","                #g_loss = criterion(d_fake, real_labels)\n","                g_loss = -torch.mean(d_fake) # *-1\n","                D.zero_grad()\n","                G.zero_grad()\n","                g_loss.backward()\n","                G_solver.step()\n","\n","        # =============== logging each iteration ===============#\n","            iteration = str(G_solver.state_dict()['state'][G_solver.state_dict()['param_groups'][0]['params'][0]]['step'])\n","            G_losses.append(g_loss.item())\n","            D_losses.append(d_loss.item())\n","            count_real_itr += 1\n","\n","  \n","            #saving the model and a image each 100 iteration\n","            if int(iteration) %50 == 0:\n","#                 samples = fake.cpu().data[:8].squeeze().numpy()\n","#                 for s in range(8):\n","#                     plotVoxelVisdom(samples[s,...], viz, \"Iteration:{:.4}\".format(iteration))\n","                plt.plot(np.arange(count_real_itr),G_losses) #,label='Gloss')\n","                #plt.savefig(\"plots/gen_{}.png\".format(iteration))\n","                plt.plot(np.arange(count_real_itr),D_losses) #,label='Dloss')\n","                plt.savefig(\"plots/losses_{}.png\".format(count_real_itr))\n","                #plt.legend(loc='upper left')\n","\n","\n","        # =============== each epoch save model or save image ===============#\n","            print('Iter-{}; , D_loss : {:.4}, G_loss : {:.4}, WSdistance : {:.4}'.format(iteration, d_loss.item(), g_loss.item(), Wasserstein_D.item() ))\n","        \n","        epoch_end_time = time.time()\n","\n","\n","        if (epoch + 1) % args.image_save_step == 0:\n","            print(\"Saving voxels\")\n","            samples = fake.cpu().data[:8].squeeze().numpy()\n","\n","            image_path = args.output_dir + args.image_dir + log_param\n","            if not os.path.exists(image_path):\n","                os.makedirs(image_path)\n","\n","            SavePloat_Voxels(samples, image_path, iteration)\n","\n","        if (epoch + 1) % args.pickle_step == 0:\n","            print(\"Saving the model\")\n","            pickle_save_path = args.output_dir + args.pickle_dir + log_param\n","            save_new_pickle(pickle_save_path, iteration, G, G_solver, D, D_solver)\n","\n","        print(\"epoch time\", (epoch_end_time-epoch_start_time)/60)\n","        print(\"epoch %d ended\" %(epoch))\n","        print(\"################################################\")"],"execution_count":43,"outputs":[{"output_type":"stream","text":["Overwriting model16/train.py\n"],"name":"stdout"}]},{"metadata":{"id":"C8zNH95r4WrG","colab_type":"text"},"cell_type":"markdown","source":["## **Training **\n","\n","---\n","\n"]},{"metadata":{"id":"N53sVlHf4YoO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":11475},"outputId":"d9a9fce5-006f-469c-d9df-b45a045db26d","executionInfo":{"status":"ok","timestamp":1543324957560,"user_tz":-60,"elapsed":155211,"user":{"displayName":"Abdelrahman Elskhawy","photoUrl":"https://lh5.googleusercontent.com/-P_aa83DUerI/AAAAAAAAAAI/AAAAAAAAAGw/2HK3RoELofc/s64/photo.jpg","userId":"14296170071263318578"}}},"cell_type":"code","source":["!python model16/main.py"],"execution_count":44,"outputs":[{"output_type":"stream","text":["model=V2_cube=16_bs=100_g_lr=0.0001_d_lr=0.0001_z=norm_bias=False_sl=True\n","../input/chair/train/\n","(5000, 4096)\n","using cuda\n","fail try read_pickle [Errno 2] No such file or directory: './pickle/model=V2_cube=16_bs=100_g_lr=0.0001_d_lr=0.0001_z=norm_bias=False_sl=True'\n","epoch 0 started\n","Iter-1; , D_loss : 4.01, G_loss : -0.4682, WSdistance : 0.005719\n","Iter-1; , D_loss : 3.179, G_loss : -0.4682, WSdistance : -0.0719\n","Iter-1; , D_loss : 2.558, G_loss : -0.4682, WSdistance : 0.05394\n","Iter-1; , D_loss : 2.184, G_loss : -0.4682, WSdistance : 0.1723\n","Iter-1; , D_loss : 1.55, G_loss : -0.4682, WSdistance : 0.2587\n","Iter-2; , D_loss : 1.231, G_loss : -0.2347, WSdistance : 0.3193\n","Iter-2; , D_loss : 0.6727, G_loss : -0.2347, WSdistance : 0.3141\n","Iter-2; , D_loss : 0.4531, G_loss : -0.2347, WSdistance : 0.3801\n","Iter-2; , D_loss : 0.1481, G_loss : -0.2347, WSdistance : 0.4721\n","Iter-2; , D_loss : 0.0862, G_loss : -0.2347, WSdistance : 0.526\n","Iter-3; , D_loss : -0.1841, G_loss : -0.09097, WSdistance : 0.5744\n","Iter-3; , D_loss : -0.3379, G_loss : -0.09097, WSdistance : 0.5914\n","Iter-3; , D_loss : -0.5209, G_loss : -0.09097, WSdistance : 0.6048\n","Iter-3; , D_loss : -0.5774, G_loss : -0.09097, WSdistance : 0.6684\n","Iter-3; , D_loss : -0.6193, G_loss : -0.09097, WSdistance : 0.6906\n","Iter-4; , D_loss : -0.6654, G_loss : -0.03959, WSdistance : 0.7289\n","Iter-4; , D_loss : -0.6988, G_loss : -0.03959, WSdistance : 0.7334\n","Iter-4; , D_loss : -0.7216, G_loss : -0.03959, WSdistance : 0.7514\n","Iter-4; , D_loss : -0.7491, G_loss : -0.03959, WSdistance : 0.7841\n","Iter-4; , D_loss : -0.6715, G_loss : -0.03959, WSdistance : 0.7978\n","Iter-5; , D_loss : -0.7776, G_loss : -0.01547, WSdistance : 0.8107\n","Iter-5; , D_loss : -0.7878, G_loss : -0.01547, WSdistance : 0.8104\n","Iter-5; , D_loss : -0.7467, G_loss : -0.01547, WSdistance : 0.8275\n","Iter-5; , D_loss : -0.7669, G_loss : -0.01547, WSdistance : 0.8625\n","Iter-5; , D_loss : -0.8013, G_loss : -0.01547, WSdistance : 0.8596\n","Iter-6; , D_loss : -0.8234, G_loss : -0.01103, WSdistance : 0.8768\n","Iter-6; , D_loss : -0.8493, G_loss : -0.01103, WSdistance : 0.8791\n","Iter-6; , D_loss : -0.8453, G_loss : -0.01103, WSdistance : 0.891\n","Iter-6; , D_loss : -0.853, G_loss : -0.01103, WSdistance : 0.9061\n","Iter-6; , D_loss : -0.8372, G_loss : -0.01103, WSdistance : 0.9059\n","Iter-7; , D_loss : -0.8584, G_loss : -0.00823, WSdistance : 0.9125\n","Iter-7; , D_loss : -0.8238, G_loss : -0.00823, WSdistance : 0.9158\n","Iter-7; , D_loss : -0.8054, G_loss : -0.00823, WSdistance : 0.9194\n","Iter-7; , D_loss : -0.8408, G_loss : -0.00823, WSdistance : 0.9186\n","Iter-7; , D_loss : -0.8134, G_loss : -0.00823, WSdistance : 0.9113\n","Iter-8; , D_loss : -0.8325, G_loss : -0.005665, WSdistance : 0.9181\n","Iter-8; , D_loss : -0.8518, G_loss : -0.005665, WSdistance : 0.9247\n","Iter-8; , D_loss : -0.8642, G_loss : -0.005665, WSdistance : 0.9244\n","Iter-8; , D_loss : -0.8878, G_loss : -0.005665, WSdistance : 0.9305\n","Iter-8; , D_loss : -0.8902, G_loss : -0.005665, WSdistance : 0.9308\n","Iter-9; , D_loss : -0.8578, G_loss : -0.005538, WSdistance : 0.9317\n","Iter-9; , D_loss : -0.8435, G_loss : -0.005538, WSdistance : 0.9354\n","Iter-9; , D_loss : -0.869, G_loss : -0.005538, WSdistance : 0.9352\n","Iter-9; , D_loss : -0.6993, G_loss : -0.005538, WSdistance : 0.941\n","Iter-9; , D_loss : -0.8023, G_loss : -0.005538, WSdistance : 0.9431\n","Iter-10; , D_loss : -0.8538, G_loss : -0.01499, WSdistance : 0.9469\n","Iter-10; , D_loss : -0.6798, G_loss : -0.01499, WSdistance : 0.9405\n","Iter-10; , D_loss : -0.4806, G_loss : -0.01499, WSdistance : 0.942\n","Iter-10; , D_loss : -0.7772, G_loss : -0.01499, WSdistance : 0.9408\n","Iter-10; , D_loss : -0.8187, G_loss : -0.01499, WSdistance : 0.934\n","epoch time 0.198773193359375\n","epoch 0 ended\n","################################################\n","epoch 1 started\n","Iter-11; , D_loss : -0.8834, G_loss : -0.003782, WSdistance : 0.9341\n","Iter-11; , D_loss : -0.5989, G_loss : -0.003782, WSdistance : 0.9222\n","Iter-11; , D_loss : 0.9371, G_loss : -0.003782, WSdistance : 0.9239\n","Iter-11; , D_loss : -0.889, G_loss : -0.003782, WSdistance : 0.9324\n","Iter-11; , D_loss : -0.8845, G_loss : -0.003782, WSdistance : 0.9341\n","Iter-12; , D_loss : -0.8007, G_loss : -0.02755, WSdistance : 0.9296\n","Iter-12; , D_loss : -0.4455, G_loss : -0.02755, WSdistance : 0.9184\n","Iter-12; , D_loss : -0.2959, G_loss : -0.02755, WSdistance : 0.9134\n","Iter-12; , D_loss : -0.7087, G_loss : -0.02755, WSdistance : 0.9141\n","Iter-12; , D_loss : -0.8466, G_loss : -0.02755, WSdistance : 0.9181\n","Iter-13; , D_loss : -0.8543, G_loss : -0.01886, WSdistance : 0.9262\n","Iter-13; , D_loss : -0.8702, G_loss : -0.01886, WSdistance : 0.9202\n","Iter-13; , D_loss : -0.845, G_loss : -0.01886, WSdistance : 0.9181\n","Iter-13; , D_loss : -0.7772, G_loss : -0.01886, WSdistance : 0.9243\n","Iter-13; , D_loss : -0.6838, G_loss : -0.01886, WSdistance : 0.9224\n","Iter-14; , D_loss : -0.6399, G_loss : -0.01502, WSdistance : 0.9233\n","Iter-14; , D_loss : -0.7502, G_loss : -0.01502, WSdistance : 0.9202\n","Iter-14; , D_loss : -0.8057, G_loss : -0.01502, WSdistance : 0.9227\n","Iter-14; , D_loss : -0.7818, G_loss : -0.01502, WSdistance : 0.9186\n","Iter-14; , D_loss : -0.7614, G_loss : -0.01502, WSdistance : 0.9163\n","Iter-15; , D_loss : -0.7862, G_loss : -0.03019, WSdistance : 0.9226\n","Iter-15; , D_loss : -0.7327, G_loss : -0.03019, WSdistance : 0.919\n","Iter-15; , D_loss : -0.4966, G_loss : -0.03019, WSdistance : 0.9215\n","Iter-15; , D_loss : -0.6117, G_loss : -0.03019, WSdistance : 0.9181\n","Iter-15; , D_loss : -0.7172, G_loss : -0.03019, WSdistance : 0.9233\n","Iter-16; , D_loss : -0.7311, G_loss : -0.01534, WSdistance : 0.9266\n","Iter-16; , D_loss : -0.6996, G_loss : -0.01534, WSdistance : 0.926\n","Iter-16; , D_loss : -0.6711, G_loss : -0.01534, WSdistance : 0.9205\n","Iter-16; , D_loss : -0.6843, G_loss : -0.01534, WSdistance : 0.9227\n","Iter-16; , D_loss : -0.6399, G_loss : -0.01534, WSdistance : 0.9258\n","Iter-17; , D_loss : -0.5626, G_loss : -0.01276, WSdistance : 0.9264\n","Iter-17; , D_loss : -0.6476, G_loss : -0.01276, WSdistance : 0.9237\n","Iter-17; , D_loss : -0.6834, G_loss : -0.01276, WSdistance : 0.9208\n","Iter-17; , D_loss : -0.6627, G_loss : -0.01276, WSdistance : 0.9218\n","Iter-17; , D_loss : -0.701, G_loss : -0.01276, WSdistance : 0.9203\n","Iter-18; , D_loss : -0.7481, G_loss : -0.01445, WSdistance : 0.9184\n","Iter-18; , D_loss : -0.6276, G_loss : -0.01445, WSdistance : 0.9146\n","Iter-18; , D_loss : -0.7118, G_loss : -0.01445, WSdistance : 0.9092\n","Iter-18; , D_loss : -0.682, G_loss : -0.01445, WSdistance : 0.9085\n","Iter-18; , D_loss : -0.7126, G_loss : -0.01445, WSdistance : 0.9142\n","Iter-19; , D_loss : -0.7182, G_loss : -0.01183, WSdistance : 0.9036\n","Iter-19; , D_loss : -0.6852, G_loss : -0.01183, WSdistance : 0.9002\n","Iter-19; , D_loss : -0.6972, G_loss : -0.01183, WSdistance : 0.9029\n","Iter-19; , D_loss : -0.6991, G_loss : -0.01183, WSdistance : 0.91\n","Iter-19; , D_loss : -0.6789, G_loss : -0.01183, WSdistance : 0.9045\n","Iter-20; , D_loss : -0.6759, G_loss : -0.01254, WSdistance : 0.9008\n","Iter-20; , D_loss : -0.6942, G_loss : -0.01254, WSdistance : 0.91\n","Iter-20; , D_loss : -0.7079, G_loss : -0.01254, WSdistance : 0.9043\n","Iter-20; , D_loss : -0.7098, G_loss : -0.01254, WSdistance : 0.9112\n","Iter-20; , D_loss : -0.6853, G_loss : -0.01254, WSdistance : 0.9053\n","epoch time 0.19491418997446697\n","epoch 1 ended\n","################################################\n","epoch 2 started\n","Iter-21; , D_loss : -0.7021, G_loss : -0.013, WSdistance : 0.9117\n","Iter-21; , D_loss : -0.7521, G_loss : -0.013, WSdistance : 0.9083\n","Iter-21; , D_loss : -0.789, G_loss : -0.013, WSdistance : 0.9142\n","Iter-21; , D_loss : -0.7925, G_loss : -0.013, WSdistance : 0.9056\n","Iter-21; , D_loss : -0.8388, G_loss : -0.013, WSdistance : 0.9137\n","Iter-22; , D_loss : -0.8316, G_loss : -0.009586, WSdistance : 0.9085\n","Iter-22; , D_loss : -0.8383, G_loss : -0.009586, WSdistance : 0.9117\n","Iter-22; , D_loss : -0.8559, G_loss : -0.009586, WSdistance : 0.9141\n","Iter-22; , D_loss : -0.8383, G_loss : -0.009586, WSdistance : 0.9136\n","Iter-22; , D_loss : -0.8085, G_loss : -0.009586, WSdistance : 0.914\n","Iter-23; , D_loss : -0.8715, G_loss : -0.00953, WSdistance : 0.9263\n","Iter-23; , D_loss : -0.8089, G_loss : -0.00953, WSdistance : 0.9194\n","Iter-23; , D_loss : -0.8817, G_loss : -0.00953, WSdistance : 0.9289\n","Iter-23; , D_loss : -0.8964, G_loss : -0.00953, WSdistance : 0.9297\n","Iter-23; , D_loss : -0.8985, G_loss : -0.00953, WSdistance : 0.9284\n","Iter-24; , D_loss : -0.8934, G_loss : -0.01036, WSdistance : 0.9302\n","Iter-24; , D_loss : -0.7938, G_loss : -0.01036, WSdistance : 0.9287\n","Iter-24; , D_loss : -0.89, G_loss : -0.01036, WSdistance : 0.9332\n","Iter-24; , D_loss : -0.8623, G_loss : -0.01036, WSdistance : 0.937\n","Iter-24; , D_loss : -0.8403, G_loss : -0.01036, WSdistance : 0.9286\n","Iter-25; , D_loss : -0.8776, G_loss : -0.007225, WSdistance : 0.9284\n","Iter-25; , D_loss : -0.8846, G_loss : -0.007225, WSdistance : 0.9272\n","Iter-25; , D_loss : -0.9018, G_loss : -0.007225, WSdistance : 0.9292\n","Iter-25; , D_loss : -0.8859, G_loss : -0.007225, WSdistance : 0.9325\n","Iter-25; , D_loss : -0.8927, G_loss : -0.007225, WSdistance : 0.94\n","Iter-26; , D_loss : -0.8629, G_loss : -0.00772, WSdistance : 0.9389\n","Iter-26; , D_loss : -0.8532, G_loss : -0.00772, WSdistance : 0.9352\n","Iter-26; , D_loss : -0.8634, G_loss : -0.00772, WSdistance : 0.9432\n","Iter-26; , D_loss : -0.8738, G_loss : -0.00772, WSdistance : 0.9443\n","Iter-26; , D_loss : -0.8798, G_loss : -0.00772, WSdistance : 0.9503\n","Iter-27; , D_loss : -0.8649, G_loss : -0.008548, WSdistance : 0.9387\n","Iter-27; , D_loss : -0.8282, G_loss : -0.008548, WSdistance : 0.9418\n","Iter-27; , D_loss : -0.8463, G_loss : -0.008548, WSdistance : 0.9447\n","Iter-27; , D_loss : -0.8454, G_loss : -0.008548, WSdistance : 0.9452\n","Iter-27; , D_loss : -0.8381, G_loss : -0.008548, WSdistance : 0.9516\n","Iter-28; , D_loss : -0.7832, G_loss : -0.007919, WSdistance : 0.9463\n","Iter-28; , D_loss : -0.8132, G_loss : -0.007919, WSdistance : 0.9502\n","Iter-28; , D_loss : -0.8663, G_loss : -0.007919, WSdistance : 0.946\n","Iter-28; , D_loss : -0.8631, G_loss : -0.007919, WSdistance : 0.9495\n","Iter-28; , D_loss : -0.9145, G_loss : -0.007919, WSdistance : 0.9507\n","Iter-29; , D_loss : -0.903, G_loss : -0.005928, WSdistance : 0.9538\n","Iter-29; , D_loss : -0.9315, G_loss : -0.005928, WSdistance : 0.9477\n","Iter-29; , D_loss : -0.8928, G_loss : -0.005928, WSdistance : 0.9473\n","Iter-29; , D_loss : -0.9093, G_loss : -0.005928, WSdistance : 0.9514\n","Iter-29; , D_loss : -0.9134, G_loss : -0.005928, WSdistance : 0.9494\n","Iter-30; , D_loss : -0.9358, G_loss : -0.005838, WSdistance : 0.9558\n","Iter-30; , D_loss : -0.9161, G_loss : -0.005838, WSdistance : 0.9564\n","Iter-30; , D_loss : -0.9157, G_loss : -0.005838, WSdistance : 0.9588\n","Iter-30; , D_loss : -0.7909, G_loss : -0.005838, WSdistance : 0.9588\n","Iter-30; , D_loss : -0.9177, G_loss : -0.005838, WSdistance : 0.9589\n","epoch time 0.1951886256535848\n","epoch 2 ended\n","################################################\n","epoch 3 started\n","Iter-31; , D_loss : -0.7329, G_loss : -0.005296, WSdistance : 0.9537\n","Iter-31; , D_loss : -0.9277, G_loss : -0.005296, WSdistance : 0.9601\n","Iter-31; , D_loss : -0.9377, G_loss : -0.005296, WSdistance : 0.9557\n","Iter-31; , D_loss : -0.9153, G_loss : -0.005296, WSdistance : 0.9658\n","Iter-31; , D_loss : -0.9082, G_loss : -0.005296, WSdistance : 0.96\n","Iter-32; , D_loss : -0.9315, G_loss : -0.00772, WSdistance : 0.9654\n","Iter-32; , D_loss : -0.9305, G_loss : -0.00772, WSdistance : 0.9621\n","Iter-32; , D_loss : -0.8304, G_loss : -0.00772, WSdistance : 0.9658\n","Iter-32; , D_loss : -0.8653, G_loss : -0.00772, WSdistance : 0.9647\n","Iter-32; , D_loss : -0.9249, G_loss : -0.00772, WSdistance : 0.9643\n","Iter-33; , D_loss : -0.8894, G_loss : -0.005165, WSdistance : 0.9668\n","Iter-33; , D_loss : -0.9393, G_loss : -0.005165, WSdistance : 0.9638\n","Iter-33; , D_loss : -0.9374, G_loss : -0.005165, WSdistance : 0.9636\n","Iter-33; , D_loss : -0.9348, G_loss : -0.005165, WSdistance : 0.9626\n","Iter-33; , D_loss : -0.9289, G_loss : -0.005165, WSdistance : 0.9618\n","Iter-34; , D_loss : -0.8946, G_loss : -0.004059, WSdistance : 0.9635\n","Iter-34; , D_loss : -0.9399, G_loss : -0.004059, WSdistance : 0.9689\n","Iter-34; , D_loss : -0.9255, G_loss : -0.004059, WSdistance : 0.9672\n","Iter-34; , D_loss : -0.9244, G_loss : -0.004059, WSdistance : 0.9676\n","Iter-34; , D_loss : -0.9332, G_loss : -0.004059, WSdistance : 0.9681\n","Iter-35; , D_loss : -0.8669, G_loss : -0.005743, WSdistance : 0.9684\n","Iter-35; , D_loss : -0.9431, G_loss : -0.005743, WSdistance : 0.9693\n","Iter-35; , D_loss : -0.9045, G_loss : -0.005743, WSdistance : 0.9706\n","Iter-35; , D_loss : -0.9014, G_loss : -0.005743, WSdistance : 0.9688\n","Iter-35; , D_loss : -0.9322, G_loss : -0.005743, WSdistance : 0.9716\n","Iter-36; , D_loss : -0.9374, G_loss : -0.007021, WSdistance : 0.974\n","Iter-36; , D_loss : -0.9222, G_loss : -0.007021, WSdistance : 0.9706\n","Iter-36; , D_loss : -0.9423, G_loss : -0.007021, WSdistance : 0.971\n","Iter-36; , D_loss : -0.9192, G_loss : -0.007021, WSdistance : 0.9722\n","Iter-36; , D_loss : -0.8306, G_loss : -0.007021, WSdistance : 0.968\n","Iter-37; , D_loss : -0.919, G_loss : -0.004693, WSdistance : 0.9698\n","Iter-37; , D_loss : -0.8994, G_loss : -0.004693, WSdistance : 0.9723\n","Iter-37; , D_loss : -0.8597, G_loss : -0.004693, WSdistance : 0.9706\n","Iter-37; , D_loss : -0.8718, G_loss : -0.004693, WSdistance : 0.9701\n","Iter-37; , D_loss : -0.8245, G_loss : -0.004693, WSdistance : 0.969\n","Iter-38; , D_loss : -0.8899, G_loss : -0.005182, WSdistance : 0.9699\n","Iter-38; , D_loss : -0.9048, G_loss : -0.005182, WSdistance : 0.9705\n","Iter-38; , D_loss : -0.8776, G_loss : -0.005182, WSdistance : 0.9672\n","Iter-38; , D_loss : -0.8969, G_loss : -0.005182, WSdistance : 0.9684\n","Iter-38; , D_loss : -0.8688, G_loss : -0.005182, WSdistance : 0.9687\n","Iter-39; , D_loss : -0.8283, G_loss : -0.005258, WSdistance : 0.9673\n","Iter-39; , D_loss : -0.8047, G_loss : -0.005258, WSdistance : 0.9641\n","Iter-39; , D_loss : -0.7898, G_loss : -0.005258, WSdistance : 0.9643\n","Iter-39; , D_loss : -0.7673, G_loss : -0.005258, WSdistance : 0.9642\n","Iter-39; , D_loss : -0.7839, G_loss : -0.005258, WSdistance : 0.963\n","Iter-40; , D_loss : -0.7731, G_loss : -0.005466, WSdistance : 0.9598\n","Iter-40; , D_loss : -0.8419, G_loss : -0.005466, WSdistance : 0.9615\n","Iter-40; , D_loss : -0.8038, G_loss : -0.005466, WSdistance : 0.9642\n","Iter-40; , D_loss : -0.8328, G_loss : -0.005466, WSdistance : 0.9632\n","Iter-40; , D_loss : -0.747, G_loss : -0.005466, WSdistance : 0.9685\n","epoch time 0.19538046518961588\n","epoch 3 ended\n","################################################\n","epoch 4 started\n","Iter-41; , D_loss : -0.8143, G_loss : -0.005683, WSdistance : 0.9628\n","Iter-41; , D_loss : -0.7928, G_loss : -0.005683, WSdistance : 0.9621\n","Iter-41; , D_loss : -0.7616, G_loss : -0.005683, WSdistance : 0.9622\n","Iter-41; , D_loss : -0.732, G_loss : -0.005683, WSdistance : 0.9662\n","Iter-41; , D_loss : -0.6986, G_loss : -0.005683, WSdistance : 0.9634\n","Iter-42; , D_loss : -0.8201, G_loss : -0.006476, WSdistance : 0.9656\n","Iter-42; , D_loss : -0.8505, G_loss : -0.006476, WSdistance : 0.9588\n","Iter-42; , D_loss : -0.8689, G_loss : -0.006476, WSdistance : 0.9609\n","Iter-42; , D_loss : -0.8807, G_loss : -0.006476, WSdistance : 0.9593\n","Iter-42; , D_loss : -0.8764, G_loss : -0.006476, WSdistance : 0.9588\n","Iter-43; , D_loss : -0.8875, G_loss : -0.006174, WSdistance : 0.9592\n","Iter-43; , D_loss : -0.8795, G_loss : -0.006174, WSdistance : 0.9609\n","Iter-43; , D_loss : -0.8433, G_loss : -0.006174, WSdistance : 0.9554\n","Iter-43; , D_loss : -0.8289, G_loss : -0.006174, WSdistance : 0.9578\n","Iter-43; , D_loss : -0.7759, G_loss : -0.006174, WSdistance : 0.9554\n","Iter-44; , D_loss : -0.7656, G_loss : -0.004319, WSdistance : 0.9566\n","Iter-44; , D_loss : -0.7566, G_loss : -0.004319, WSdistance : 0.9565\n","Iter-44; , D_loss : -0.7809, G_loss : -0.004319, WSdistance : 0.9575\n","Iter-44; , D_loss : -0.8085, G_loss : -0.004319, WSdistance : 0.9566\n","Iter-44; , D_loss : -0.8579, G_loss : -0.004319, WSdistance : 0.9519\n","Iter-45; , D_loss : -0.8648, G_loss : -0.004377, WSdistance : 0.9575\n","Iter-45; , D_loss : -0.9177, G_loss : -0.004377, WSdistance : 0.9616\n","Iter-45; , D_loss : -0.8592, G_loss : -0.004377, WSdistance : 0.961\n","Iter-45; , D_loss : -0.8669, G_loss : -0.004377, WSdistance : 0.9617\n","Iter-45; , D_loss : -0.8888, G_loss : -0.004377, WSdistance : 0.9647\n","Iter-46; , D_loss : -0.9026, G_loss : -0.004937, WSdistance : 0.9665\n","Iter-46; , D_loss : -0.8987, G_loss : -0.004937, WSdistance : 0.9643\n","Iter-46; , D_loss : -0.9038, G_loss : -0.004937, WSdistance : 0.9705\n","Iter-46; , D_loss : -0.8288, G_loss : -0.004937, WSdistance : 0.9712\n","Iter-46; , D_loss : -0.886, G_loss : -0.004937, WSdistance : 0.9687\n","Iter-47; , D_loss : -0.8346, G_loss : -0.005089, WSdistance : 0.9698\n","Iter-47; , D_loss : -0.7997, G_loss : -0.005089, WSdistance : 0.9692\n","Iter-47; , D_loss : -0.8537, G_loss : -0.005089, WSdistance : 0.9706\n","Iter-47; , D_loss : -0.8504, G_loss : -0.005089, WSdistance : 0.9692\n","Iter-47; , D_loss : -0.8313, G_loss : -0.005089, WSdistance : 0.9663\n","Iter-48; , D_loss : -0.8662, G_loss : -0.004427, WSdistance : 0.9663\n","Iter-48; , D_loss : -0.8934, G_loss : -0.004427, WSdistance : 0.9641\n","Iter-48; , D_loss : -0.8686, G_loss : -0.004427, WSdistance : 0.9664\n","Iter-48; , D_loss : -0.9066, G_loss : -0.004427, WSdistance : 0.9701\n","Iter-48; , D_loss : -0.8675, G_loss : -0.004427, WSdistance : 0.9691\n","Iter-49; , D_loss : -0.8423, G_loss : -0.004683, WSdistance : 0.9731\n","Iter-49; , D_loss : -0.8489, G_loss : -0.004683, WSdistance : 0.9712\n","Iter-49; , D_loss : -0.7638, G_loss : -0.004683, WSdistance : 0.9686\n","Iter-49; , D_loss : -0.7629, G_loss : -0.004683, WSdistance : 0.9683\n","Iter-49; , D_loss : -0.7798, G_loss : -0.004683, WSdistance : 0.9737\n","Iter-50; , D_loss : -0.8156, G_loss : -0.004718, WSdistance : 0.9706\n","Iter-50; , D_loss : -0.8768, G_loss : -0.004718, WSdistance : 0.9724\n","Iter-50; , D_loss : -0.8721, G_loss : -0.004718, WSdistance : 0.9729\n","Iter-50; , D_loss : -0.8467, G_loss : -0.004718, WSdistance : 0.9714\n","Iter-50; , D_loss : -0.7701, G_loss : -0.004718, WSdistance : 0.9713\n","epoch time 0.20325160026550293\n","epoch 4 ended\n","################################################\n","epoch 5 started\n","Iter-51; , D_loss : -0.7993, G_loss : -0.003523, WSdistance : 0.97\n","Iter-51; , D_loss : -0.7068, G_loss : -0.003523, WSdistance : 0.9688\n","Iter-51; , D_loss : -0.8078, G_loss : -0.003523, WSdistance : 0.9718\n","Iter-51; , D_loss : -0.8902, G_loss : -0.003523, WSdistance : 0.975\n","Iter-51; , D_loss : -0.9197, G_loss : -0.003523, WSdistance : 0.9708\n","Iter-52; , D_loss : -0.8857, G_loss : -0.004375, WSdistance : 0.9725\n","Iter-52; , D_loss : -0.9312, G_loss : -0.004375, WSdistance : 0.9717\n","Iter-52; , D_loss : -0.9145, G_loss : -0.004375, WSdistance : 0.9736\n","Iter-52; , D_loss : -0.9364, G_loss : -0.004375, WSdistance : 0.9765\n","Iter-52; , D_loss : -0.8836, G_loss : -0.004375, WSdistance : 0.9748\n","Iter-53; , D_loss : -0.8975, G_loss : -0.003947, WSdistance : 0.9782\n","Iter-53; , D_loss : -0.9306, G_loss : -0.003947, WSdistance : 0.9759\n","Iter-53; , D_loss : -0.9084, G_loss : -0.003947, WSdistance : 0.9751\n","Iter-53; , D_loss : -0.8546, G_loss : -0.003947, WSdistance : 0.9754\n","Iter-53; , D_loss : -0.7686, G_loss : -0.003947, WSdistance : 0.9713\n","Iter-54; , D_loss : -0.8025, G_loss : -0.002432, WSdistance : 0.9719\n","Iter-54; , D_loss : -0.7711, G_loss : -0.002432, WSdistance : 0.9711\n","Iter-54; , D_loss : -0.8506, G_loss : -0.002432, WSdistance : 0.9755\n","Iter-54; , D_loss : -0.7975, G_loss : -0.002432, WSdistance : 0.9716\n","Iter-54; , D_loss : -0.828, G_loss : -0.002432, WSdistance : 0.9742\n","Iter-55; , D_loss : -0.8254, G_loss : -0.003023, WSdistance : 0.9762\n","Iter-55; , D_loss : -0.8128, G_loss : -0.003023, WSdistance : 0.9746\n","Iter-55; , D_loss : -0.7284, G_loss : -0.003023, WSdistance : 0.9728\n","Iter-55; , D_loss : -0.7142, G_loss : -0.003023, WSdistance : 0.9734\n","Iter-55; , D_loss : -0.7294, G_loss : -0.003023, WSdistance : 0.9746\n","Iter-56; , D_loss : -0.6862, G_loss : -0.003376, WSdistance : 0.9755\n","Iter-56; , D_loss : -0.7272, G_loss : -0.003376, WSdistance : 0.9723\n","Iter-56; , D_loss : -0.8042, G_loss : -0.003376, WSdistance : 0.9803\n","Iter-56; , D_loss : -0.829, G_loss : -0.003376, WSdistance : 0.9781\n","Iter-56; , D_loss : -0.8013, G_loss : -0.003376, WSdistance : 0.9795\n","Iter-57; , D_loss : -0.6568, G_loss : -0.005265, WSdistance : 0.9778\n","Iter-57; , D_loss : -0.7413, G_loss : -0.005265, WSdistance : 0.9785\n","Iter-57; , D_loss : -0.8326, G_loss : -0.005265, WSdistance : 0.9773\n","Iter-57; , D_loss : -0.9068, G_loss : -0.005265, WSdistance : 0.977\n","Iter-57; , D_loss : -0.7183, G_loss : -0.005265, WSdistance : 0.9742\n","Iter-58; , D_loss : -0.8634, G_loss : -0.004042, WSdistance : 0.9717\n","Iter-58; , D_loss : -0.8188, G_loss : -0.004042, WSdistance : 0.9719\n","Iter-58; , D_loss : -0.7602, G_loss : -0.004042, WSdistance : 0.9734\n","Iter-58; , D_loss : -0.5543, G_loss : -0.004042, WSdistance : 0.9759\n","Iter-58; , D_loss : -0.674, G_loss : -0.004042, WSdistance : 0.9778\n","Iter-59; , D_loss : -0.6743, G_loss : -0.004443, WSdistance : 0.9743\n","Iter-59; , D_loss : -0.7598, G_loss : -0.004443, WSdistance : 0.9733\n","Iter-59; , D_loss : -0.7572, G_loss : -0.004443, WSdistance : 0.9714\n","Iter-59; , D_loss : -0.8028, G_loss : -0.004443, WSdistance : 0.9723\n","Iter-59; , D_loss : -0.7798, G_loss : -0.004443, WSdistance : 0.9727\n","Iter-60; , D_loss : -0.7755, G_loss : -0.005192, WSdistance : 0.9725\n","Iter-60; , D_loss : -0.7451, G_loss : -0.005192, WSdistance : 0.9715\n","Iter-60; , D_loss : -0.6902, G_loss : -0.005192, WSdistance : 0.9687\n","Iter-60; , D_loss : -0.6949, G_loss : -0.005192, WSdistance : 0.9701\n","Iter-60; , D_loss : -0.7103, G_loss : -0.005192, WSdistance : 0.9719\n","epoch time 0.19645243485768635\n","epoch 5 ended\n","################################################\n","epoch 6 started\n","Iter-61; , D_loss : -0.7499, G_loss : -0.003236, WSdistance : 0.9735\n","Iter-61; , D_loss : -0.7355, G_loss : -0.003236, WSdistance : 0.9722\n","Iter-61; , D_loss : -0.7542, G_loss : -0.003236, WSdistance : 0.9732\n","Iter-61; , D_loss : -0.764, G_loss : -0.003236, WSdistance : 0.9679\n","Iter-61; , D_loss : -0.7896, G_loss : -0.003236, WSdistance : 0.972\n","Iter-62; , D_loss : -0.795, G_loss : -0.003439, WSdistance : 0.9738\n","Iter-62; , D_loss : -0.8393, G_loss : -0.003439, WSdistance : 0.9703\n","Iter-62; , D_loss : -0.814, G_loss : -0.003439, WSdistance : 0.9731\n","Iter-62; , D_loss : -0.7558, G_loss : -0.003439, WSdistance : 0.9713\n","Iter-62; , D_loss : -0.7131, G_loss : -0.003439, WSdistance : 0.9756\n","Iter-63; , D_loss : -0.6598, G_loss : -0.003841, WSdistance : 0.9747\n","Iter-63; , D_loss : -0.6305, G_loss : -0.003841, WSdistance : 0.9745\n","Iter-63; , D_loss : -0.5757, G_loss : -0.003841, WSdistance : 0.977\n","Iter-63; , D_loss : -0.6068, G_loss : -0.003841, WSdistance : 0.9776\n","Iter-63; , D_loss : -0.5904, G_loss : -0.003841, WSdistance : 0.9713\n","Iter-64; , D_loss : -0.7778, G_loss : -0.003375, WSdistance : 0.9738\n","Iter-64; , D_loss : -0.8295, G_loss : -0.003375, WSdistance : 0.9759\n","Iter-64; , D_loss : -0.8107, G_loss : -0.003375, WSdistance : 0.9763\n","Iter-64; , D_loss : -0.7786, G_loss : -0.003375, WSdistance : 0.9766\n","Iter-64; , D_loss : -0.68, G_loss : -0.003375, WSdistance : 0.9789\n","Iter-65; , D_loss : -0.4859, G_loss : -0.004303, WSdistance : 0.9759\n","Iter-65; , D_loss : -0.4023, G_loss : -0.004303, WSdistance : 0.9773\n","Iter-65; , D_loss : -0.566, G_loss : -0.004303, WSdistance : 0.979\n","Iter-65; , D_loss : -0.7692, G_loss : -0.004303, WSdistance : 0.9804\n","Iter-65; , D_loss : -0.8426, G_loss : -0.004303, WSdistance : 0.9826\n","Iter-66; , D_loss : -0.791, G_loss : -0.00471, WSdistance : 0.9802\n","Iter-66; , D_loss : -0.7193, G_loss : -0.00471, WSdistance : 0.9796\n","Iter-66; , D_loss : -0.5442, G_loss : -0.00471, WSdistance : 0.9789\n","Iter-66; , D_loss : -0.5768, G_loss : -0.00471, WSdistance : 0.9791\n","Iter-66; , D_loss : -0.5807, G_loss : -0.00471, WSdistance : 0.9762\n","Iter-67; , D_loss : -0.6205, G_loss : -0.003322, WSdistance : 0.9758\n","Iter-67; , D_loss : -0.6861, G_loss : -0.003322, WSdistance : 0.975\n","Iter-67; , D_loss : -0.6368, G_loss : -0.003322, WSdistance : 0.9726\n","Iter-67; , D_loss : -0.7763, G_loss : -0.003322, WSdistance : 0.9741\n","Iter-67; , D_loss : -0.8525, G_loss : -0.003322, WSdistance : 0.9786\n","Iter-68; , D_loss : -0.7935, G_loss : -0.004016, WSdistance : 0.9794\n","Iter-68; , D_loss : -0.7957, G_loss : -0.004016, WSdistance : 0.9805\n","Iter-68; , D_loss : -0.699, G_loss : -0.004016, WSdistance : 0.979\n","Iter-68; , D_loss : -0.631, G_loss : -0.004016, WSdistance : 0.9815\n","Iter-68; , D_loss : -0.4033, G_loss : -0.004016, WSdistance : 0.9804\n","Iter-69; , D_loss : -0.6355, G_loss : -0.00607, WSdistance : 0.9789\n","Iter-69; , D_loss : -0.7203, G_loss : -0.00607, WSdistance : 0.9827\n","Iter-69; , D_loss : -0.8019, G_loss : -0.00607, WSdistance : 0.98\n","Iter-69; , D_loss : -0.7761, G_loss : -0.00607, WSdistance : 0.9785\n","Iter-69; , D_loss : -0.6593, G_loss : -0.00607, WSdistance : 0.9769\n","Iter-70; , D_loss : -0.618, G_loss : -0.005523, WSdistance : 0.9758\n","Iter-70; , D_loss : -0.4426, G_loss : -0.005523, WSdistance : 0.9749\n","Iter-70; , D_loss : -0.4524, G_loss : -0.005523, WSdistance : 0.9745\n","Iter-70; , D_loss : -0.7143, G_loss : -0.005523, WSdistance : 0.973\n","Iter-70; , D_loss : -0.7578, G_loss : -0.005523, WSdistance : 0.9747\n","epoch time 0.19584213097890218\n","epoch 6 ended\n","################################################\n","epoch 7 started\n","Iter-71; , D_loss : -0.8157, G_loss : -0.00401, WSdistance : 0.9759\n","Iter-71; , D_loss : -0.8398, G_loss : -0.00401, WSdistance : 0.9781\n","Iter-71; , D_loss : -0.855, G_loss : -0.00401, WSdistance : 0.9775\n","Iter-71; , D_loss : -0.836, G_loss : -0.00401, WSdistance : 0.9773\n","Iter-71; , D_loss : -0.779, G_loss : -0.00401, WSdistance : 0.9802\n","Iter-72; , D_loss : -0.7441, G_loss : -0.004282, WSdistance : 0.9823\n","Iter-72; , D_loss : -0.5976, G_loss : -0.004282, WSdistance : 0.9802\n","Iter-72; , D_loss : -0.3841, G_loss : -0.004282, WSdistance : 0.984\n","Iter-72; , D_loss : -0.6279, G_loss : -0.004282, WSdistance : 0.9828\n","Iter-72; , D_loss : -0.7176, G_loss : -0.004282, WSdistance : 0.9815\n","Iter-73; , D_loss : -0.8331, G_loss : -0.005373, WSdistance : 0.9791\n","Iter-73; , D_loss : -0.8881, G_loss : -0.005373, WSdistance : 0.978\n","Iter-73; , D_loss : -0.8582, G_loss : -0.005373, WSdistance : 0.9776\n","Iter-73; , D_loss : -0.8794, G_loss : -0.005373, WSdistance : 0.9739\n","Iter-73; , D_loss : -0.8789, G_loss : -0.005373, WSdistance : 0.9791\n","Iter-74; , D_loss : -0.8346, G_loss : -0.00303, WSdistance : 0.9776\n","Iter-74; , D_loss : -0.7004, G_loss : -0.00303, WSdistance : 0.9779\n","Iter-74; , D_loss : -0.5715, G_loss : -0.00303, WSdistance : 0.9767\n","Iter-74; , D_loss : -0.6418, G_loss : -0.00303, WSdistance : 0.9762\n","Iter-74; , D_loss : -0.6913, G_loss : -0.00303, WSdistance : 0.9756\n","Iter-75; , D_loss : -0.7564, G_loss : -0.004975, WSdistance : 0.9756\n","Iter-75; , D_loss : -0.7644, G_loss : -0.004975, WSdistance : 0.9774\n","Iter-75; , D_loss : -0.7948, G_loss : -0.004975, WSdistance : 0.9766\n","Iter-75; , D_loss : -0.7416, G_loss : -0.004975, WSdistance : 0.9776\n","Iter-75; , D_loss : -0.5668, G_loss : -0.004975, WSdistance : 0.9751\n","Iter-76; , D_loss : -0.4308, G_loss : -0.003486, WSdistance : 0.9774\n","Iter-76; , D_loss : -0.4492, G_loss : -0.003486, WSdistance : 0.9745\n","Iter-76; , D_loss : -0.5986, G_loss : -0.003486, WSdistance : 0.9764\n","Iter-76; , D_loss : -0.6437, G_loss : -0.003486, WSdistance : 0.9749\n","Iter-76; , D_loss : -0.7179, G_loss : -0.003486, WSdistance : 0.9773\n","Iter-77; , D_loss : -0.8257, G_loss : -0.006059, WSdistance : 0.9773\n","Iter-77; , D_loss : -0.7305, G_loss : -0.006059, WSdistance : 0.9788\n","Iter-77; , D_loss : -0.7262, G_loss : -0.006059, WSdistance : 0.9831\n","Iter-77; , D_loss : -0.4199, G_loss : -0.006059, WSdistance : 0.9796\n","Iter-77; , D_loss : -0.7121, G_loss : -0.006059, WSdistance : 0.9821\n","Iter-78; , D_loss : -0.5346, G_loss : -0.005997, WSdistance : 0.9772\n","Iter-78; , D_loss : -0.7229, G_loss : -0.005997, WSdistance : 0.9772\n","Iter-78; , D_loss : -0.7811, G_loss : -0.005997, WSdistance : 0.9791\n","Iter-78; , D_loss : -0.7653, G_loss : -0.005997, WSdistance : 0.9773\n","Iter-78; , D_loss : -0.6788, G_loss : -0.005997, WSdistance : 0.9756\n","Iter-79; , D_loss : -0.6006, G_loss : -0.002983, WSdistance : 0.9744\n","Iter-79; , D_loss : -0.5667, G_loss : -0.002983, WSdistance : 0.9744\n","Iter-79; , D_loss : -0.5324, G_loss : -0.002983, WSdistance : 0.9692\n","Iter-79; , D_loss : -0.7797, G_loss : -0.002983, WSdistance : 0.9741\n","Iter-79; , D_loss : -0.7984, G_loss : -0.002983, WSdistance : 0.9765\n","Iter-80; , D_loss : -0.8255, G_loss : -0.003288, WSdistance : 0.9768\n","Iter-80; , D_loss : -0.7829, G_loss : -0.003288, WSdistance : 0.9762\n","Iter-80; , D_loss : -0.6589, G_loss : -0.003288, WSdistance : 0.9775\n","Iter-80; , D_loss : -0.5309, G_loss : -0.003288, WSdistance : 0.975\n","Iter-80; , D_loss : -0.269, G_loss : -0.003288, WSdistance : 0.98\n","epoch time 0.1961219072341919\n","epoch 7 ended\n","################################################\n","epoch 8 started\n","Iter-81; , D_loss : -0.1226, G_loss : -0.003359, WSdistance : 0.9789\n","Iter-81; , D_loss : 0.08909, G_loss : -0.003359, WSdistance : 0.9814\n","Iter-81; , D_loss : 0.2054, G_loss : -0.003359, WSdistance : 0.9814\n","Iter-81; , D_loss : -0.3541, G_loss : -0.003359, WSdistance : 0.9829\n","Iter-81; , D_loss : -0.6299, G_loss : -0.003359, WSdistance : 0.9793\n","Iter-82; , D_loss : -0.7289, G_loss : -0.005105, WSdistance : 0.9816\n","Iter-82; , D_loss : -0.7564, G_loss : -0.005105, WSdistance : 0.9811\n","Iter-82; , D_loss : -0.6592, G_loss : -0.005105, WSdistance : 0.9721\n","Iter-82; , D_loss : -0.5375, G_loss : -0.005105, WSdistance : 0.9784\n","Iter-82; , D_loss : -0.5425, G_loss : -0.005105, WSdistance : 0.9793\n","Iter-83; , D_loss : -0.5025, G_loss : -0.003532, WSdistance : 0.9758\n","Iter-83; , D_loss : -0.3957, G_loss : -0.003532, WSdistance : 0.9742\n","Iter-83; , D_loss : -0.4096, G_loss : -0.003532, WSdistance : 0.9761\n","Iter-83; , D_loss : -0.4402, G_loss : -0.003532, WSdistance : 0.9778\n","Iter-83; , D_loss : -0.3895, G_loss : -0.003532, WSdistance : 0.9774\n","Iter-84; , D_loss : -0.5965, G_loss : -0.003322, WSdistance : 0.9786\n","Iter-84; , D_loss : -0.6589, G_loss : -0.003322, WSdistance : 0.979\n","Iter-84; , D_loss : -0.6657, G_loss : -0.003322, WSdistance : 0.977\n","Iter-84; , D_loss : -0.655, G_loss : -0.003322, WSdistance : 0.9764\n","Iter-84; , D_loss : -0.5536, G_loss : -0.003322, WSdistance : 0.9731\n","Iter-85; , D_loss : -0.6516, G_loss : -0.002679, WSdistance : 0.9739\n","Iter-85; , D_loss : -0.548, G_loss : -0.002679, WSdistance : 0.9692\n","Iter-85; , D_loss : -0.525, G_loss : -0.002679, WSdistance : 0.9754\n","Iter-85; , D_loss : -0.4417, G_loss : -0.002679, WSdistance : 0.9741\n","Iter-85; , D_loss : -0.5872, G_loss : -0.002679, WSdistance : 0.9769\n","Iter-86; , D_loss : -0.4821, G_loss : -0.002452, WSdistance : 0.9735\n","Iter-86; , D_loss : -0.471, G_loss : -0.002452, WSdistance : 0.9696\n","Iter-86; , D_loss : -0.4422, G_loss : -0.002452, WSdistance : 0.968\n","Iter-86; , D_loss : -0.5756, G_loss : -0.002452, WSdistance : 0.9727\n","Iter-86; , D_loss : -0.6555, G_loss : -0.002452, WSdistance : 0.9763\n","Iter-87; , D_loss : -0.4538, G_loss : -0.001916, WSdistance : 0.978\n","Iter-87; , D_loss : -0.3268, G_loss : -0.001916, WSdistance : 0.9791\n","Iter-87; , D_loss : -0.1547, G_loss : -0.001916, WSdistance : 0.9781\n","Iter-87; , D_loss : -0.08336, G_loss : -0.001916, WSdistance : 0.9802\n","Iter-87; , D_loss : -0.1097, G_loss : -0.001916, WSdistance : 0.9774\n","Iter-88; , D_loss : -0.1806, G_loss : -0.002403, WSdistance : 0.9804\n","Iter-88; , D_loss : -0.326, G_loss : -0.002403, WSdistance : 0.9784\n","Iter-88; , D_loss : -0.122, G_loss : -0.002403, WSdistance : 0.9785\n","Iter-88; , D_loss : -0.2405, G_loss : -0.002403, WSdistance : 0.9784\n","Iter-88; , D_loss : -0.2509, G_loss : -0.002403, WSdistance : 0.9763\n","Iter-89; , D_loss : -0.4114, G_loss : -0.002467, WSdistance : 0.9765\n","Iter-89; , D_loss : -0.5142, G_loss : -0.002467, WSdistance : 0.9734\n","Iter-89; , D_loss : -0.6769, G_loss : -0.002467, WSdistance : 0.9765\n","Iter-89; , D_loss : -0.6585, G_loss : -0.002467, WSdistance : 0.9749\n","Iter-89; , D_loss : -0.7452, G_loss : -0.002467, WSdistance : 0.9767\n","Iter-90; , D_loss : -0.7056, G_loss : -0.002898, WSdistance : 0.979\n","Iter-90; , D_loss : -0.6821, G_loss : -0.002898, WSdistance : 0.9826\n","Iter-90; , D_loss : -0.6456, G_loss : -0.002898, WSdistance : 0.9806\n","Iter-90; , D_loss : -0.5164, G_loss : -0.002898, WSdistance : 0.9831\n","Iter-90; , D_loss : -0.414, G_loss : -0.002898, WSdistance : 0.9802\n","epoch time 0.19570178588231404\n","epoch 8 ended\n","################################################\n","epoch 9 started\n","Iter-91; , D_loss : -0.2484, G_loss : -0.003293, WSdistance : 0.9793\n","Iter-91; , D_loss : -0.001248, G_loss : -0.003293, WSdistance : 0.9799\n","Iter-91; , D_loss : 0.002736, G_loss : -0.003293, WSdistance : 0.9795\n","Iter-91; , D_loss : -0.05393, G_loss : -0.003293, WSdistance : 0.9758\n","Iter-91; , D_loss : -0.4377, G_loss : -0.003293, WSdistance : 0.9758\n","Iter-92; , D_loss : -0.6638, G_loss : -0.003908, WSdistance : 0.9749\n","Iter-92; , D_loss : -0.7025, G_loss : -0.003908, WSdistance : 0.978\n","Iter-92; , D_loss : -0.7524, G_loss : -0.003908, WSdistance : 0.9816\n","Iter-92; , D_loss : -0.7832, G_loss : -0.003908, WSdistance : 0.9824\n","Iter-92; , D_loss : -0.6164, G_loss : -0.003908, WSdistance : 0.9853\n","Iter-93; , D_loss : -0.2952, G_loss : -0.00478, WSdistance : 0.9841\n","Iter-93; , D_loss : -0.268, G_loss : -0.00478, WSdistance : 0.9847\n","Iter-93; , D_loss : -0.08741, G_loss : -0.00478, WSdistance : 0.9851\n","Iter-93; , D_loss : -0.3614, G_loss : -0.00478, WSdistance : 0.9845\n","Iter-93; , D_loss : -0.6113, G_loss : -0.00478, WSdistance : 0.9851\n","Iter-94; , D_loss : -0.6957, G_loss : -0.003745, WSdistance : 0.9857\n","Iter-94; , D_loss : -0.8164, G_loss : -0.003745, WSdistance : 0.9839\n","Iter-94; , D_loss : -0.7509, G_loss : -0.003745, WSdistance : 0.9842\n","Iter-94; , D_loss : -0.8709, G_loss : -0.003745, WSdistance : 0.9845\n","Iter-94; , D_loss : -0.7994, G_loss : -0.003745, WSdistance : 0.9812\n","Iter-95; , D_loss : -0.8148, G_loss : -0.0045, WSdistance : 0.9812\n","Iter-95; , D_loss : -0.7516, G_loss : -0.0045, WSdistance : 0.9824\n","Iter-95; , D_loss : -0.58, G_loss : -0.0045, WSdistance : 0.9815\n","Iter-95; , D_loss : -0.258, G_loss : -0.0045, WSdistance : 0.9812\n","Iter-95; , D_loss : 0.2728, G_loss : -0.0045, WSdistance : 0.9806\n","Iter-96; , D_loss : 0.3898, G_loss : -0.003286, WSdistance : 0.9829\n","Iter-96; , D_loss : 0.2714, G_loss : -0.003286, WSdistance : 0.9803\n","Iter-96; , D_loss : -0.2424, G_loss : -0.003286, WSdistance : 0.9789\n","Iter-96; , D_loss : -0.3524, G_loss : -0.003286, WSdistance : 0.9781\n","Iter-96; , D_loss : -0.4173, G_loss : -0.003286, WSdistance : 0.9779\n","Iter-97; , D_loss : -0.693, G_loss : -0.002457, WSdistance : 0.9773\n","Iter-97; , D_loss : -0.7827, G_loss : -0.002457, WSdistance : 0.9769\n","Iter-97; , D_loss : -0.8518, G_loss : -0.002457, WSdistance : 0.983\n","Iter-97; , D_loss : -0.8449, G_loss : -0.002457, WSdistance : 0.9832\n","Iter-97; , D_loss : -0.8374, G_loss : -0.002457, WSdistance : 0.9799\n","Iter-98; , D_loss : -0.8566, G_loss : -0.003357, WSdistance : 0.9825\n","Iter-98; , D_loss : -0.7874, G_loss : -0.003357, WSdistance : 0.9841\n","Iter-98; , D_loss : -0.6727, G_loss : -0.003357, WSdistance : 0.9832\n","Iter-98; , D_loss : -0.5689, G_loss : -0.003357, WSdistance : 0.9844\n","Iter-98; , D_loss : -0.3315, G_loss : -0.003357, WSdistance : 0.9858\n","Iter-99; , D_loss : 0.3282, G_loss : -0.00306, WSdistance : 0.9873\n","Iter-99; , D_loss : -0.3362, G_loss : -0.00306, WSdistance : 0.9853\n","Iter-99; , D_loss : -0.6577, G_loss : -0.00306, WSdistance : 0.9867\n","Iter-99; , D_loss : -0.8024, G_loss : -0.00306, WSdistance : 0.9863\n","Iter-99; , D_loss : -0.757, G_loss : -0.00306, WSdistance : 0.9839\n","Iter-100; , D_loss : -0.8173, G_loss : -0.002894, WSdistance : 0.9834\n","Iter-100; , D_loss : -0.7681, G_loss : -0.002894, WSdistance : 0.9832\n","Iter-100; , D_loss : -0.8504, G_loss : -0.002894, WSdistance : 0.9822\n","Iter-100; , D_loss : -0.7703, G_loss : -0.002894, WSdistance : 0.9781\n","Iter-100; , D_loss : -0.7516, G_loss : -0.002894, WSdistance : 0.9805\n","Saving voxels\n","Saving the model\n","epoch time 0.20462997754414877\n","epoch 9 ended\n","################################################\n","epoch 10 started\n","Iter-101; , D_loss : -0.7448, G_loss : -0.002284, WSdistance : 0.9826\n","Iter-101; , D_loss : -0.6356, G_loss : -0.002284, WSdistance : 0.9829\n","Iter-101; , D_loss : -0.5448, G_loss : -0.002284, WSdistance : 0.9809\n","Iter-101; , D_loss : -0.3362, G_loss : -0.002284, WSdistance : 0.9825\n","Iter-101; , D_loss : -0.1973, G_loss : -0.002284, WSdistance : 0.9816\n","Iter-102; , D_loss : -0.2645, G_loss : -0.001278, WSdistance : 0.9798\n","Iter-102; , D_loss : -0.4902, G_loss : -0.001278, WSdistance : 0.9798\n","Iter-102; , D_loss : -0.7601, G_loss : -0.001278, WSdistance : 0.9813\n","Iter-102; , D_loss : -0.8208, G_loss : -0.001278, WSdistance : 0.9815\n","Iter-102; , D_loss : -0.8463, G_loss : -0.001278, WSdistance : 0.9845\n","Iter-103; , D_loss : -0.7351, G_loss : -0.002752, WSdistance : 0.9838\n","Iter-103; , D_loss : -0.499, G_loss : -0.002752, WSdistance : 0.9853\n","Iter-103; , D_loss : -0.7149, G_loss : -0.002752, WSdistance : 0.9847\n","Iter-103; , D_loss : -0.8965, G_loss : -0.002752, WSdistance : 0.9857\n","Iter-103; , D_loss : -0.8567, G_loss : -0.002752, WSdistance : 0.9847\n","Iter-104; , D_loss : -0.8323, G_loss : -0.002055, WSdistance : 0.9853\n","Iter-104; , D_loss : -0.8154, G_loss : -0.002055, WSdistance : 0.9842\n","Iter-104; , D_loss : -0.8285, G_loss : -0.002055, WSdistance : 0.984\n","Iter-104; , D_loss : -0.8149, G_loss : -0.002055, WSdistance : 0.9837\n","Iter-104; , D_loss : -0.8001, G_loss : -0.002055, WSdistance : 0.9828\n","Iter-105; , D_loss : -0.7894, G_loss : -0.001426, WSdistance : 0.9845\n","Iter-105; , D_loss : -0.77, G_loss : -0.001426, WSdistance : 0.9869\n","Iter-105; , D_loss : -0.7286, G_loss : -0.001426, WSdistance : 0.9823\n","Iter-105; , D_loss : -0.6324, G_loss : -0.001426, WSdistance : 0.982\n","Iter-105; , D_loss : -0.5205, G_loss : -0.001426, WSdistance : 0.9847\n","Iter-106; , D_loss : -0.401, G_loss : -0.001185, WSdistance : 0.9802\n","Iter-106; , D_loss : -0.3698, G_loss : -0.001185, WSdistance : 0.9806\n","Iter-106; , D_loss : -0.02399, G_loss : -0.001185, WSdistance : 0.9744\n","Iter-106; , D_loss : -0.5749, G_loss : -0.001185, WSdistance : 0.9799\n","Iter-106; , D_loss : -0.6865, G_loss : -0.001185, WSdistance : 0.9809\n","Iter-107; , D_loss : -0.7194, G_loss : -0.001947, WSdistance : 0.985\n","Iter-107; , D_loss : -0.8091, G_loss : -0.001947, WSdistance : 0.984\n","Iter-107; , D_loss : -0.7734, G_loss : -0.001947, WSdistance : 0.9878\n","Iter-107; , D_loss : -0.7257, G_loss : -0.001947, WSdistance : 0.9871\n","Iter-107; , D_loss : -0.7966, G_loss : -0.001947, WSdistance : 0.9864\n","Iter-108; , D_loss : -0.8579, G_loss : -0.001212, WSdistance : 0.9859\n","Iter-108; , D_loss : -0.7665, G_loss : -0.001212, WSdistance : 0.9879\n","Iter-108; , D_loss : -0.6703, G_loss : -0.001212, WSdistance : 0.9855\n","Iter-108; , D_loss : -0.5648, G_loss : -0.001212, WSdistance : 0.9868\n","Iter-108; , D_loss : -0.4988, G_loss : -0.001212, WSdistance : 0.9844\n","Iter-109; , D_loss : -0.4102, G_loss : -0.0007668, WSdistance : 0.9847\n","Iter-109; , D_loss : -0.4002, G_loss : -0.0007668, WSdistance : 0.9838\n","Iter-109; , D_loss : -0.1888, G_loss : -0.0007668, WSdistance : 0.9795\n","Iter-109; , D_loss : -0.3235, G_loss : -0.0007668, WSdistance : 0.9847\n","Iter-109; , D_loss : -0.3687, G_loss : -0.0007668, WSdistance : 0.9836\n","Iter-110; , D_loss : -0.5711, G_loss : -0.001483, WSdistance : 0.9826\n","Iter-110; , D_loss : -0.6196, G_loss : -0.001483, WSdistance : 0.9811\n","Iter-110; , D_loss : -0.565, G_loss : -0.001483, WSdistance : 0.9816\n","Iter-110; , D_loss : -0.5141, G_loss : -0.001483, WSdistance : 0.9806\n","Iter-110; , D_loss : -0.523, G_loss : -0.001483, WSdistance : 0.9819\n","epoch time 0.20029811064402261\n","epoch 10 ended\n","################################################\n","epoch 11 started\n","Iter-111; , D_loss : -0.423, G_loss : -0.001812, WSdistance : 0.9822\n","Iter-111; , D_loss : -0.5847, G_loss : -0.001812, WSdistance : 0.9832\n","Iter-111; , D_loss : -0.5943, G_loss : -0.001812, WSdistance : 0.9816\n","Iter-111; , D_loss : -0.5634, G_loss : -0.001812, WSdistance : 0.9812\n","Iter-111; , D_loss : -0.5242, G_loss : -0.001812, WSdistance : 0.9806\n","Iter-112; , D_loss : -0.6552, G_loss : -0.001647, WSdistance : 0.9807\n","Iter-112; , D_loss : -0.4685, G_loss : -0.001647, WSdistance : 0.9841\n","Iter-112; , D_loss : -0.5851, G_loss : -0.001647, WSdistance : 0.9816\n","Iter-112; , D_loss : -0.5652, G_loss : -0.001647, WSdistance : 0.9829\n","Iter-112; , D_loss : -0.5538, G_loss : -0.001647, WSdistance : 0.9808\n","Iter-113; , D_loss : -0.5607, G_loss : -0.001476, WSdistance : 0.9841\n","Iter-113; , D_loss : -0.4311, G_loss : -0.001476, WSdistance : 0.9816\n","Iter-113; , D_loss : -0.5028, G_loss : -0.001476, WSdistance : 0.9828\n","Iter-113; , D_loss : -0.5541, G_loss : -0.001476, WSdistance : 0.9786\n","Iter-113; , D_loss : -0.4938, G_loss : -0.001476, WSdistance : 0.9831\n","Iter-114; , D_loss : -0.5724, G_loss : -0.001815, WSdistance : 0.9847\n","Iter-114; , D_loss : -0.6699, G_loss : -0.001815, WSdistance : 0.9809\n","Iter-114; , D_loss : -0.6853, G_loss : -0.001815, WSdistance : 0.9835\n","Iter-114; , D_loss : -0.6817, G_loss : -0.001815, WSdistance : 0.9834\n","Iter-114; , D_loss : -0.7211, G_loss : -0.001815, WSdistance : 0.9827\n","Iter-115; , D_loss : -0.7531, G_loss : -0.001846, WSdistance : 0.9821\n","Iter-115; , D_loss : -0.6911, G_loss : -0.001846, WSdistance : 0.9829\n","Iter-115; , D_loss : -0.7617, G_loss : -0.001846, WSdistance : 0.9833\n","Iter-115; , D_loss : -0.7649, G_loss : -0.001846, WSdistance : 0.982\n","Iter-115; , D_loss : -0.8059, G_loss : -0.001846, WSdistance : 0.9818\n","Iter-116; , D_loss : -0.7783, G_loss : -0.001629, WSdistance : 0.985\n","Iter-116; , D_loss : -0.8574, G_loss : -0.001629, WSdistance : 0.9857\n","Iter-116; , D_loss : -0.8391, G_loss : -0.001629, WSdistance : 0.9825\n","Iter-116; , D_loss : -0.8382, G_loss : -0.001629, WSdistance : 0.9827\n","Iter-116; , D_loss : -0.817, G_loss : -0.001629, WSdistance : 0.9835\n","Iter-117; , D_loss : -0.774, G_loss : -0.00126, WSdistance : 0.9825\n","Iter-117; , D_loss : -0.7954, G_loss : -0.00126, WSdistance : 0.982\n","Iter-117; , D_loss : -0.7306, G_loss : -0.00126, WSdistance : 0.9809\n","Iter-117; , D_loss : -0.6763, G_loss : -0.00126, WSdistance : 0.9847\n","Iter-117; , D_loss : -0.6858, G_loss : -0.00126, WSdistance : 0.9849\n","Iter-118; , D_loss : -0.6692, G_loss : -0.001689, WSdistance : 0.9854\n","Iter-118; , D_loss : -0.6679, G_loss : -0.001689, WSdistance : 0.9837\n","Iter-118; , D_loss : -0.5253, G_loss : -0.001689, WSdistance : 0.9812\n","Iter-118; , D_loss : -0.2858, G_loss : -0.001689, WSdistance : 0.9801\n","Iter-118; , D_loss : -0.5216, G_loss : -0.001689, WSdistance : 0.9779\n","Iter-119; , D_loss : -0.6387, G_loss : -0.001941, WSdistance : 0.9818\n","Process Process-12:\n","Traceback (most recent call last):\n","  File \"/usr/lib/python3.6/multiprocessing/process.py\", line 258, in _bootstrap\n","    self.run()\n","  File \"/usr/lib/python3.6/multiprocessing/process.py\", line 93, in run\n","    self._target(*self._args, **self._kwargs)\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/utils/data/dataloader.py\", line 96, in _worker_loop\n","    r = index_queue.get(timeout=MANAGER_STATUS_CHECK_INTERVAL)\n","  File \"/usr/lib/python3.6/multiprocessing/queues.py\", line 104, in get\n","    if not self._poll(timeout):\n","  File \"/usr/lib/python3.6/multiprocessing/connection.py\", line 257, in poll\n","    return self._poll(timeout)\n","  File \"/usr/lib/python3.6/multiprocessing/connection.py\", line 414, in _poll\n","    r = wait([self], timeout)\n","  File \"/usr/lib/python3.6/multiprocessing/connection.py\", line 911, in wait\n","    ready = selector.select(timeout)\n","  File \"/usr/lib/python3.6/selectors.py\", line 376, in select\n","    fd_event_list = self._poll.poll(timeout)\n","KeyboardInterrupt\n","Traceback (most recent call last):\n","  File \"model16/main.py\", line 86, in <module>\n","    main(args)\n","  File \"model16/main.py\", line 7, in main\n","    train(args)\n","  File \"/content/model16/train.py\", line 169, in train\n","    d_loss.backward()\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/tensor.py\", line 93, in backward\n","    torch.autograd.backward(self, gradient, retain_graph, create_graph)\n","  File \"/usr/local/lib/python3.6/dist-packages/torch/autograd/__init__.py\", line 90, in backward\n","    allow_unreachable=True)  # allow_unreachable flag\n","KeyboardInterrupt\n"],"name":"stdout"}]},{"metadata":{"id":"3yIlvZOE40xA","colab_type":"code","colab":{}},"cell_type":"code","source":["!mkdir  plots"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ImUSdPVvGB_j","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}